<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_89907_vehicle_to_toll_user_statement</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_89907_vehicle_to_toll_user_statement">userVALCHANGES^EQ<item endquery="false" field="user" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Restart Workflow on User Change</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
    // Check if the user field has changed
    if (current.user != previous.user) {
        gs.info('User field has changed. Proceeding with workflow restart.');

        // Load the Workflow associated with the User Statement Manager Approval table
        var workflowGR = new GlideRecord('wf_workflow');
        workflowGR.addQuery('name', 'User Statement Manager Approval');
        workflowGR.query();

        if (workflowGR.next()) {
            gs.info('Workflow found: ' + workflowGR.name);

            // Find all associated Workflow Contexts
            gs.info('Workflow: ' + workflowGR.sys_id + ' ID: ' + current.sys_id + ' Table: ' + current.getTableName());
            var contextGR = new GlideRecord('wf_context');
            contextGR.addQuery('workflow', workflowGR.sys_id);
            contextGR.addQuery('table', current.getTableName());
            contextGR.addQuery('id', current.sys_id);
            contextGR.addQuery('state', '!=', 'canceled'); // Exclude Workflow Contexts that are already in the "canceled" state
            contextGR.query();

            var workflow = new global.Workflow();

            while (contextGR.next()) {
                gs.info('Context found. Cancelling existing Workflow Context.');

                // Cancel the existing Workflow Context
                contextGR.state = 'canceled';
                contextGR.ended = new GlideDateTime(); // Set the "ended" field to the current timestamp
                contextGR.update();

                // Set the "active" field of the wf_history records to "false"
                var wfHistoryGR = new GlideRecord('wf_history');
                wfHistoryGR.addQuery('context', contextGR.sys_id);
                wfHistoryGR.query();
                while (wfHistoryGR.next()) {
                    wfHistoryGR.active = false;
                    wfHistoryGR.update();
                }

                // Set the "state" field of the sysapproval_approver records to "Cancelled"
                var sysapprovalApproverGR = new GlideRecord('sysapproval_approver');
                sysapprovalApproverGR.addQuery('document_id', current.sys_id);
                sysapprovalApproverGR.query();
                while (sysapprovalApproverGR.next()) {
                    sysapprovalApproverGR.state = 'Cancelled';
                    sysapprovalApproverGR.update();
                }
            }

            gs.info('Starting new Workflow instance for current object.');

            // Start a new Workflow instance for the current object
            workflow.startFlow(workflowGR.sys_id, current, current.operation());
        } else {
            gs.info('No workflow found with the specified name.');
        }
    } else {
        gs.info('User field has not changed. No action required.');
    }
})(current, previous);
]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-04-24 16:40:32</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>953059971bda25106df72026ec4bcb4e</sys_id>
        <sys_mod_count>18</sys_mod_count>
        <sys_name>Restart Workflow on User Change</sys_name>
        <sys_overrides/>
        <sys_package display_value="Vehicle Tolls" source="x_89907_vehicle_to">fdbdd41b4f1813005d57b2718110c78f</sys_package>
        <sys_policy/>
        <sys_scope display_value="Vehicle Tolls">fdbdd41b4f1813005d57b2718110c78f</sys_scope>
        <sys_update_name>sys_script_953059971bda25106df72026ec4bcb4e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-04-25 01:44:54</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=953059971bda25106df72026ec4bcb4e"/>
</record_update>
