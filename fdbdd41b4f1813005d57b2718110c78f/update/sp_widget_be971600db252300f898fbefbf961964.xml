<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($scope, $location, spUtil, amb, $http, spAriaUtil, $timeout, spNavStateManager, glideFormFactory, $rootScope) {
	var c = this;
	/*
	 * options:
	 * hide_footer (bool) = true to remove the data table footer contents
	 * hide_header (bool) = true to remove the data table header contents
	 * show_new (bool) = true to show the "New" record button
	 * show_keywords (bool) = true to show the keyword search field
	 * table (string) = the table name to query
	 * filter (string) = the encoded query
	 * o (string) = the order by column
	 * d (string) = The order by direction: asc or desc
	 * p (int) = the page to jump to
	 * fields (string) = comma seperated list of fields that become the list columns
	 * view (string) = the default view to load for columns, overrides fields
	*/
	
	// Set global variables on $rootScope for Dispute Change

	$scope.exportTypes = [{label:'PDF', value: 'PDF'}, {label:'Excel', value:'EXCEL'}, {label:'CSV', value:'CSV'}];
	var keys = ['table', 'filter', 'p', 'o', 'd'];

	var eventNames = {
		click: 'data_table.click',
		setFilter: 'data_table.setFilter',
		setKeywords: 'data_table.setKeywords'
	};

	$scope.go = function(table, item, ev) {
		spNavStateManager.onRecordChange(table).then(function() {
		var parms = {};
		parms.table = table;
		parms.sys_id = item.sys_id;
		parms.record = item;
		$scope.ignoreLocationChange = true;
		for (var x in c.data.list) {
			c.data.list[x].selected = false;
		}
		item.selected = true;
		$scope.$emit(eventNames.click, parms);
		}, function() {
			// do nothing in case of closing the modal by clicking on x
		});	
	};

	$scope.newRecord = function(){
		var parms = {
			id: 'form',
			table: $scope.data.table,
			view: $scope.data.view,
			sys_id: '-1'
		};
		if ($scope.data.filter != '')
			parms.query = $scope.data.filter;

		$location.search(parms);
	};

	function recoverStateFromUrl() {
		$scope.data.fields = [];
		var s = $location.search();
		for (var x in keys) {
			if (s[keys[x]]) {
				$scope.data[keys[x]] = s[keys[x]];
			}
		}
		$scope.server.update().then(function(data) {
			if (s.sys_id) {
				for (var x in data.list) {
					if (data.list[x].sys_id == s.sys_id) {
						$scope.go(s.table, data.list[x]);
					}
				}
			}
		});
	}

	if ($scope.options.fromUrl) {
		var origSearch = $location.search();
		$scope.$on('$locationChangeSuccess', function(e) {
			var s = $location.search();
			if (origSearch.id !== s.id)
				return;

			if ($scope.ignoreLocationChange){
				$scope.ignoreLocationChange = false;
				return;
			}

			// Helps to recover state when using the browser's back button
			recoverStateFromUrl();
		});
	}


	$scope.getNumber = function(num) {
		return new Array(num);
	};

	$scope.mathMin = function(v1,v2) {
		return Math.min(v1,v2);
	};

	function getData(updateUrl) {
		var f = $scope.data;
		spUtil.update($scope).then(function(data) {
			f.view = data.view;
			if ($scope.options.fromUrl && updateUrl)
				setPermalink(f.table, f.filter, f.o, f.d, f.p);

			if ($scope.options.show_breadcrumbs && data.filterBreadcrumbs)
				$scope.$broadcast('widget-filter-breadcrumbs.setBreadcrumbs', data.filterBreadcrumbs.data, data.filter);

			initRecordWatcher(f.table, f.filter);
		});
	}

	function setPermalink(table, filter, orderBy, orderDirection, page){
		$scope.ignoreLocationChange = true;
		var search = $location.search();
		angular.extend(search, {
			spa: 1,
			table: table,
			filter: filter,
			p: page,
			o: orderBy,
			d: orderDirection
		});
		$location.search(search);
	}

	var watcher;
	function initRecordWatcher(table, filter){
		if (watcher)
			watcher.unsubscribe();

		if (table && filter) {
			var watcherChannel = amb.getChannelRW(table, filter);
			amb.connect();
			watcher = watcherChannel.subscribe(function(message) {
				if (!message.data)
					return;
				switch(message.data.action) {
					case "change":
						updateRowFromRW(message);
						break;
					case "exit":
						// A record was removed
					case "enter":
						// A record was added
					default:
						spUtil.update($scope);
						break;
				}
			});
		}
	}

	function updateRowFromRW(message) {
		if (message.data && message.data.sys_id && $scope.data.list) {
			var row, field;
			for(var i=0;i<$scope.data.list.length; i++) {
				row = $scope.data.list[i];
				if (row.sys_id == message.data.sys_id) {
					var fields = Object.getOwnPropertyNames(message.data.record);
					for(var f in fields) {
						field = fields[f];
						if(typeof row[field] !== 'undefined') {
						    row[field].display_value = message.data.record[field].display_value;
							row[field].displayValue = row[field].display_value;
						}
					}
				}
			}
		}
	}

	$scope.$on('$destroy', function() {
		if (watcher)
			watcher.unsubscribe();
	});

	$scope.setPageNum = function(num) {
		$scope.data.p = num;
		getData(true);
		$timeout(function() {
			$scope.focusOnTableHeader();
		});
	};

	$scope.setOrderBy = function(field) {
		var d = "asc";
		if ($scope.data.o == field) {
			if ($scope.data.d == "asc")
				d = "desc";
			else
				d = "asc";
		}

		if (d === "asc") {
			spAriaUtil.sendLiveMessage($scope.data.msg.sortingByAsc);
		} else if (d === "desc") {
			spAriaUtil.sendLiveMessage($scope.data.msg.sortingByDesc);
		}

		$scope.data.o = field;
		$scope.data.d = d;
		$scope.setSearch(true);
	};

	$scope.setSearch = function(updateUrl) {
		$scope.data.p = 1;
		getData(updateUrl);
	};

	$scope.$on(eventNames.setFilter, function(e, newFilter){
		$scope.data.filter = newFilter;
		$scope.setSearch(false);
	});

	$scope.$on(eventNames.setKeywords, function(e, keywords){
		$scope.data.keywords = keywords;
		$scope.setSearch(false);
	});

	$scope.$on('widget-filter-breadcrumbs.queryModified', function(e, newFilter){
		$scope.data.filter = newFilter;
		$scope.setSearch(true);
	});

	$scope.rowsWerePruned = function() {
		if (!$scope.data.list)
			return;

		$scope.rowsPruned = $scope.mathMin($scope.data.window_end,$scope.data.row_count) - $scope.data.window_start - $scope.data.list.length;
		return $scope.rowsPruned > 0;
	};

	$scope.showFilter = function() {
		return !$scope.data.list.length && !$scope.data.num_pages && !$scope.data.invalid_table && !$scope.loadingData;
	};

	c.appendQuery = function(query){
		if ($scope.data.filter.length > 1)
			$scope.data.filter += '^';
		$scope.data.filter += query;
			$scope.setSearch();

	};

	// Makes Widget Async
	var title = $scope.options.title;
	if ($scope.options.use_instance_title === 'false')
		title = $scope.title;
	$scope.data = $scope.options;
	$scope.loadingData = true;
	$scope.server.update().then(function() {
		if ($scope.data.newButtonUnsupported)
			console.log("Service Portal: New button not supported for sys_attachment list");
		$scope.data.title = title;
		$scope.loadingData = false;
		initRecordWatcher($scope.data.table, $scope.data.filter);
	});

	function parseQuery(table, queryString){
		return $http.post('/api/now/sp/parsequery/' + table, queryString).then(function(response){
				return response.data.result;
		});
	}

	c.createQueryTerm = function(table, field, sys_id, operator){
		return $http.get('/api/now/sp/getInOutQueryTerm', {
			params: {
				table: table,
				sys_id: sys_id,
				field: field,
				operator: operator
			}
		}).then(function(response){
			if (response && response.data && response.data.result)
				return response.data.result.parts;
		});
	};

	c.showMatching = function(field, newTerm) {
		var queryString = $scope.data.filter;
		var eq = "";
		parseQuery($scope.data.table, queryString).then(function(oldTerms) {
			for(var i=0; i<oldTerms.length; i++){
				var term = oldTerms[i];
				if (isSameField(newTerm, term))
					continue;

				if (eq.length)
					eq += '^';

				eq += getEncodedTerm(term);
			}
			if (eq.length)
					eq += '^';
			eq += getEncodedTerm(newTerm);

			$scope.data.filter = eq;
			$scope.setSearch();
		});
	};

	c.filterOut = function(field, newTerm) {
		var eq = $scope.data.filter;
		if (eq.length)
					eq += '^';

		eq += getEncodedTerm(newTerm);
		$scope.data.filter = eq;
		$scope.setSearch();
	};

	function isSameField(t1, t2) {
		if ('left' in t1 && 'left' in t2)
			return t1.left.field === t2.left.field;
		else if ('left' in t1)
			return t1.left.field === t2.field;
		else if ('left' in t2)
			return t1.field === t2.left.field;
		return t1.field === t2.field;
	}

	function getEncodedTerm(term) {
		var eq;
		if (term.left) {
			eq = getEncodedTerm(term.left);
			eq += '^OR';
			eq += getEncodedTerm(term.right);
		} else {
			eq = term.field;
			eq += term.operator;
			eq += term.value;
		}
		return eq;
	}
	
	$scope.getGlideForm = function() {
		return g_form;
	};
	
	
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.panel-heading {
  padding-left: 8px;
}

thead {
  border-bottom: 1px solid #ddd;
}

table {
  margin-bottom: 0;
}

.table &gt; thead &gt; tr &gt; th {
  border: 1px solid #ddd;
  cursor: pointer;
  vertical-align: middle;

  &amp;:nth-child(2) {
    border-left: none;
  }



  &amp;:last-child {
    border-right: none;
  }
}

th i {
  display: inline-block;
  margin-left: 5px;
  color: #A0A0A0;
}

th .disabled{
  color:#ddd;
}

.th-title {
  display: inline-block;
  color: $primary;
}

.panel-body {
  overflow: auto;
  padding: 0px;
}


.selected {
  color: #fff;
  background-color: #909090;
  border-color: 1px solid #fff;
}

tbody tr:last-child {
  border-bottom: none;
}

.pruned-msg {
  padding-bottom: 10px;
  padding-left: 4px;
  text-align: center;
}

.pruned-msg-filter-pad {
  padding-top:8px;
}

.filter-breadcrumbs {
  border-bottom: 1px solid #ddd;
  padding-top: 3px;
}

.dropdown-toggle {
  background: none;
  padding: 0 0 4px 0;
}

.panel-body {
  overflow: initial;
}

}</css>
        <data_table>sp_instance_table</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>color,glyph,class_name,size,table,filter,maximum_entries,display_field,field_list,url,short_description,sp_page,css,widget_parameters,order_by,order_direction,title</field_list>
        <has_preview>false</has_preview>
        <id>dmk-inline-edit-table</id>
        <internal>false</internal>
        <link><![CDATA[function DataTable3Link(scope, element, attrs, ctrl) {
}]]></link>
        <name>DMK Inline Edit Table</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function dmkInlineEditTable() {
	if (!input) {
		// asynch load list
		return;
	}
	data.msg = {};
	data.msg.sortingByAsc = gs.getMessage("Sorting by ascending");
	data.msg.sortingByDesc = gs.getMessage("Sorting by descending");

	data.title = options.title || input.title;

	/*
	 * data.table = the table
	 * data.p = the current page starting at 1
	 * data.o = the order by column
	 * data.d = the order by direction
	 * data.keywords = the keyword search term
	 * data.list = the table data as an array
	 * data.invalid_table = true if table is invalid or if data was not succesfully fetched
	 * data.table_label = the table's display name. e.g. Incident
	 * data.table_plural = the table's plural display name. e.g. Incidents
	 * data.fields = a comma delimited list of field names to show in the data table
	 * data.column_labels = a map of field name -> display name
	 * data.window_size = the number of rows to show
	 * data.filter = the encoded query
	 */
	// copy to data[name] from input[name] || option[name]
	optCopy(["table", "filter", "fields"]);
	optCopy(["p", "o", "d", "filterACLs", "keywords", "view"]);
	optCopy(["relationship_id", "apply_to", "apply_to_sys_id", "window_size"]);
	data.fields = data.fields || input.field_list || options.field_list;
	data.o = data.o || input.order_by || options.order_by;
	data.d = data.d || input.order_direction || options.order_direction;

	if (!data.table) {
		data.invalid_table = true;
		data.table_label = "";
		return;
	}

	if (!data.fields) {
		if (data.view) {
			data.fields = $sp.getListColumns(data.table, data.view);
		} else {
			data.fields = $sp.getListColumns(data.table);
		}
	}

	//	data.view = data.view || 'mobile';
	data.table = data.table || $sp.getValue("table");
	data.filter = data.filter || $sp.getValue("filter");
	data.keywords = data.keywords || $sp.getValue("keywords");
	data.p = data.p || $sp.getValue("p") || 1;
	data.p = parseInt(data.p, 10);
	data.o = data.o || $sp.getValue("o") || $sp.getValue("order_by");
	data.d = data.d || $sp.getValue("d") || $sp.getValue("order_direction");
	data.page_index = data.p - 1;
	data.show_new = data.show_new || options.show_new;

	var windowSize = data.window_size || $sp.getValue("maximum_entries") || 20;
	windowSize = parseInt(windowSize, 10);
	if (isNaN(windowSize) || windowSize < 1) {
		windowSize = 20;
	}
	data.window_size = windowSize;

	var tableItemGR;
	if (gs.getProperty("glide.security.ui.filter") == "true") {
		tableItemGR = new FilteredGlideRecord(data.table);
		tableItemGR.applyRowSecurity();
	} else {
		tableItemGR = new GlideRecordSecure(data.table);
	}
	if (!tableItemGR.isValid()) {
		data.invalid_table = true;
		data.table_label = data.table;
		return;
	}

	data.canCreate = tableItemGR.canCreate();
	data.newButtonUnsupported = data.table == "sys_attachment";
	data.table_label = tableItemGR.getLabel();
	data.table_plural = "Charges";

	tableItemGR.addEncodedQuery("user_statement=" + $sp.getParameter("sys_id"));

	data.filter = tableItemGR.getEncodedQuery();

	if (data.o) {
		if (data.d == "asc") {
			tableItemGR.orderBy(data.o);
		} else {
			tableItemGR.orderByDesc(data.o);
		}
	}

	data.window_start = data.page_index * data.window_size;
	data.window_end = (data.page_index + 1) * data.window_size;
	tableItemGR.chooseWindow(data.window_start, data.window_end);
	tableItemGR._query();

	data.row_count = tableItemGR.getRowCount();
	data.num_pages = Math.ceil(data.row_count / data.window_size);
	data.column_labels = {};
	var fieldsObject = EditableDataTableUtil.getFields(
		data.table,
		data.fields.split(",")
	);

	//	console.log("BEFORE" + JSON.stringify(fieldsObject));

	var tmpFieldNames = data.fields.split(",");
	data.fields_array = [];
	for (var i = 0; i < tmpFieldNames.length; i++) {
		data.fields_array.push(fieldsObject[tmpFieldNames[i]]);
	}

	//	console.log("AFTER" + JSON.stringify(data.fields_array));

	var statementGR = new GlideRecord("x_89907_vehicle_to_toll_user_statement");
	statementGR.get($sp.getParameter("sys_id"));
	var statementIsPending = statementGR.getValue("progress_phase") == 1;
	
	data.list = [];
	while (tableItemGR._next()) {
		var record = {};
		$sp.getRecordElements(record, tableItemGR, data.fields);
		// eslint-disable-next-line no-restricted-syntax
		for (var f in fieldsObject) {
			if (tableItemGR.isValidField(f)) {
				record[f].canWrite = tableItemGR[f].canWrite();
				record[f].displayValue = record[f].display_value;
				record[f].stagedValue = record[f].value;
				// eslint-disable-next-line guard-for-in, no-restricted-syntax
				for (var p in fieldsObject[f]) {
					// copy all properties from field to item
					// so the editable field will work
					record[f][p] = fieldsObject[f][p];
				}
			}
		}
		record.canWrite = tableItemGR.canWrite() && statementIsPending;
		record.sys_id = tableItemGR.getValue("sys_id");
		data.list.push(record);
	}

	// copy to data from input or options
	function optCopy(names) {
		names.forEach(function(name) {
			data[name] = input[name] || options[name];
		});
	}
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>chad.hall</sys_created_by>
        <sys_created_on>2018-10-29 19:12:42</sys_created_on>
        <sys_id>be971600db252300f898fbefbf961964</sys_id>
        <sys_mod_count>213</sys_mod_count>
        <sys_name>DMK Inline Edit Table</sys_name>
        <sys_package display_value="Vehicle Tolls" source="x_89907_vehicle_to">fdbdd41b4f1813005d57b2718110c78f</sys_package>
        <sys_policy/>
        <sys_scope display_value="Vehicle Tolls">fdbdd41b4f1813005d57b2718110c78f</sys_scope>
        <sys_update_name>sp_widget_be971600db252300f898fbefbf961964</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-07-19 20:09:44</sys_updated_on>
        <template><![CDATA[  <div class="panel panel-{{options.color}} b">
    <div class="panel-heading form-inline" ng-hide="options.hide_header">
      <span class="dropdown m-r-xs">
        <button aria-label="${Table menu}" class="btn dropdown-toggle glyphicon glyphicon-menu-hamburger" style="line-height: 1.4em" id="optionsMenu" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
        <ul class="dropdown-menu" aria-labelledby="optionsMenu">
          <li ng-repeat="t in ::exportTypes">
            <a ng-href="/{{data.table}}_list.do?{{::t.value}}&sysparm_query={{data.filter}}&sysparm_view={{data.view}}&sysparm_fields={{data.fields}}" target="_new">${Export as} {{::t.label}}</a>
          </li>
        </ul>
      </span>
      <span class="panel-title"><i ng-if="options.glyph" class="fa fa-{{options.glyph}} m-r"></i>{{data.title || data.table_plural}}</span>
      <button name="new" role="link" class="btn btn-primary btn-sm m-l-xs" ng-click="newRecord()" ng-if="options.show_new && data.canCreate && !data.newButtonUnsupported" aria-label="${Create new record}">${New}</button>
      <div class="pull-right" ng-if="options.show_keywords">
		<form ng-submit="setSearch(true)">
        <div class="input-group">
          <input type="text" name="datatable-search" ng-model="data.keywords" ng-model-options="{debounce:250}" class="form-control" placeholder="${Keyword Search}">
          <span class="input-group-btn">
            <button name="search" class="btn btn-default" type="submit" aria-label="${Search}"><span class="glyphicon glyphicon-search"></span></button>
          </span>
        </div>
        </form>
      </div>
      <div class="clearfix"></div>
    </div>
    <!-- body -->
    <div class="panel-body">
      <h2 class="sr-only data-table-title">{{title || data.table_plural}} ${table} - ${page} {{data.p}}</h2>
      <div ng-if="options.show_breadcrumbs && (data.filter || data.enable_filter)" class="filter-breadcrumbs">
	    		<sp-widget widget="data.filterBreadcrumbs"></sp-widget>
      </div>
      <div class="alert alert-info" ng-if="!data.list.length && !data.num_pages && !data.invalid_table && !loadingData">
        ${No records in {{data.table_label}} <span ng-if="data.filter">using that filter</span>}
      </div>
      <div class="alert alert-info" ng-if="loadingData">
          <fa name="spinner" spin="true"></fa> ${Loading data}...
       </div>
      <table class="table table-striped table-responsive" ng-if="data.list.length">
        <thead>
          <tr>
            <th class="sr-only"></th>
            <th style="width: 22.3px;"></th>
            <th ng-repeat="field in data.fields_array track by $index" ng-click="setOrderBy(field.name)" tabindex="0">
              <div class="th-title" aria-label="${Sort by } {{field.label}}">{{field.label}}</div>
              <i class="fa" ng-if="field.name == data.o" ng-class="{'asc': 'fa-chevron-up', 'desc': 'fa-chevron-down'}[data.d]" aria-label="${Sorted by } {{field.label}} {{data.d == 'asc' ?  '${Ascending}': '${Descending}' }}"></i>
            </th>
          </tr>
        </thead>
        <tbody>
          <tr ng-repeat="item in data.list track by item.sys_id">
            <td class="sr-only" tabindex="0" role="link" ng-click="go(data.table, item, $event)" aria-label="${Open record}"></td>
            <td style="width: 22.3px;">
&nbsp;<!--
              <a class="btn btn-default btn-xs" ng-click="go(data.table, item, $event)">
                <i class="fa fa-info-circle"></i>
              </a>
-->
			</td>
            <td role="text" style="position: relative;" aria-label="{{item[field.name].displayValue}}" class="pointer" ng-class="{selected: item.selected}" ng-repeat="field in ::data.fields_array" data-field="{{::field.name}}" data-th="{{::field.label}}">
<!-- original
							<sp-editable-field table="{{data.table}}" table-id="item.sys_id" editable-by-user="item[field.name].canWrite" field-model="item[field.name]"></sp-editable-field>
-->
							<span ng-if="field.name == 'personal_toll'">
                <span personal-toll-checkbox my-is-checked="{{item[field.name].value}}" my-field-model="item[field.name]" other-model="item['disputed']">
                      <sp-editable-field table="{{data.table}}" table-id="item.sys_id" editable-by-user="item.canWrite && item[field.name].canWrite" field-model="item[field.name]"></sp-editable-field>
                </span>
              </span>

              <span ng-if="field.name == 'disputed'">
                  <span disputed-checkbox my-is-checked="{{item[field.name].value}}" my-field-model="item[field.name]" other-model="item['personal_toll']">
                      <sp-editable-field table="{{data.table}}" table-id="item.sys_id" editable-by-user="item.canWrite && item[field.name].canWrite" field-model="item[field.name]"></sp-editable-field>
                  </span>
              </span>           
              
      				<span ng-if="field.name != 'personal_toll' && field.name != 'disputed'">
                <sp-editable-field table="{{data.table}}" table-id="item.sys_id" editable-by-user="false" field-model="item[field.name]"></sp-editable-field>
              </span>
            </td>
          </tr>
        </tbody>
      </table>
      <div ng-class="{'pruned-msg-filter-pad': (!options.show_breadcrumbs || !data.filter) && !data.list.length}" class="pruned-msg" ng-if="rowsWerePruned()">
        <span ng-if="rowsPruned == 1">${{{rowsPruned}} row removed by security constraints}</span>
        <span ng-if="rowsPruned > 1">${{{rowsPruned}} rows removed by security constraints}</span>
      </div>
    </div>
    <!-- footer -->
    <div class="panel-footer" ng-hide="options.hide_footer" ng-if="data.row_count">
      <div class="btn-toolbar m-r pull-left">
        <div class="btn-group">
          <a ng-disabled="data.p == 1" href="javascript:void(0)" ng-click="setPageNum(data.p - 1)" class="btn btn-default"  aria-label="${Previous page}"><i class="fa fa-chevron-left"></i></a>
        </div>
        <div ng-if="data.num_pages > 1 && data.num_pages < 20" class="btn-group">
          <a ng-repeat="i in getNumber(data.num_pages) track by $index" ng-click="setPageNum($index + 1)" href="javascript:void(0)" ng-class="{active: ($index + 1) == data.p}" type="button" class="btn btn-default" aria-label="${Page} {{$index + 1}}">{{$index + 1}}</a>
        </div>
        <div class="btn-group">
          <a ng-disabled="data.p == data.num_pages" href="javascript:void(0)" ng-click="setPageNum(data.p + 1)" class="btn btn-default" aria-label="${Next page}"><i class="fa fa-chevron-right"></i></a>
        </div>
      </div>
      <div class="m-t-xs panel-title">${Rows {{data.window_start + 1}} - {{ mathMin(data.window_end,data.row_count) }} of {{data.row_count}}}</div>

      <span class="clearfix"></span>
    </div>
  </div>]]></template>
    </sp_widget>
</record_update>
